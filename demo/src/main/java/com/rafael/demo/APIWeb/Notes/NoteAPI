
=======================================================================================================================
API WEB
application.properties:
server.port=8081
MUDA A PORTA DE ENTRADA
--------------------------------------------------------------------------------------
BACK
GET para ENVIAR dados,
POST para OBETER novos dados,
PUT para atualizar dados existentes,
DELETE para remover dados.
----------------------------------------------
@RestController -> A anotação @RestController indica para o framework que se trata de um controlador Rest,
voltado para o desenvolvimento de aplicações web Restful e facilita que nós lidemos com requisições web
(POST, GET, PUT, etc) pois une o Controller a um ResponseBody para todos métodos marcados pelo RequestMapping


@RequestMapping é uma anotação de nível de classe que define o prefixo de URL para todas as rotas de um
controller. @GetMapping define uma rota que responde a requisições HTTP GET.


---------------------------------------------------
 @Controller é criar um Map do model object e encontrar uma view, mas o @RestController
 simplesmente retorna o objeto e os dados do objeto são gravados diretamente na resposta
 HTTP como JSON ou XML.

 O @Controller é uma anotação comum usada para marcar uma classe como Spring MVC Controller,
 enquanto o @RestController é um controlador especial usado para serviços RESTFul e o equivalente a
 @Controller + @ResponseBody.
-------------------------------------------------------------------------------------------------------------------
@CrossOrigin("*") -> Cross-Origin Resource Sharing ou CORS é um mecanismo que permite que recursos restritos
em uma página da web sejam recuperados por outro domínio fora do domínio ao qual pertence o recurso que será
recuperado
pode qualquer um entra
mas tem um modo de ser mais restrito
----------------------------------------
CorsConfiguration -> pasta
CorsConfiguration.java ->
package br.com.alura.screenmatch.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfiguration implements WebMvcConfigurer {

    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("http://127.0.0.1:5501")
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "TRACE", "CONNECT");
    }
}
-----------------------------------------------------------------------------------
BASICAMENTE FALA QUE SO ESSA URL PODE ACESSAR O BACK E SO PODE FAZER ESSE TIPO DE MUDANÇAS QUE DEMOSTANDO ACiMA
==============================================================================
@Service
ISSO DEMOSTRA PARA CONTROLADOR QUE ISSO CLASS DE SERVIÇO
------------------------------------
@Autowired
private SerieService servico;
BASICAMENTE VC DELEGA OUTRA CLASS PARA FAZER TODA PARTE LOGICA DE SERVIÇO
____________________________________________________
algumas das anotação
@Controller: Usada para marcar uma classe como um controlador no padrão MVC (Model-View-Controller). Essa anotação é usada para receber requisições e manipular lógica de negócios.
@RestController: Uma variação de @Controller, específica para APIs RESTful. Combina as anotações @Controller e @ResponseBody, indicando que cada método retorna um objeto serializado diretamente em JSON ou XML como resposta.
@RequestMapping: Define mapeamentos entre URLs e métodos de controlador. Especifica as URLs para as quais um método do controlador deve responder e os métodos HTTP correspondentes (GET, POST, PUT, DELETE etc.).
@GetMapping, @PostMapping, @PutMapping, @DeleteMapping: Atalhos para as operações HTTP GET, POST, PUT e DELETE, respectivamente, em métodos de controlador.
@RequestParam: Usada para mapear os parâmetros de requisição HTTP para os parâmetros do método do controlador.
------------------------------------------------------------------------------------------
@PathVariable: Usada para vincular variáveis de template de URL a parâmetros de métodos de controlador.

@GetMapping("/{id}")
public SerieDTO obterPorId(@PathVariable Long id) {
-----------------------------------------------------------------------------
@RequestBody: Utilizada para mapear o corpo da requisição HTTP para um objeto de entrada do método do controlador.
@ResponseBody: Indica que o valor retornado pelo método do controlador deve ser usado diretamente como corpo da resposta HTTP.
@Valid e @Validated: Utilizadas para ativar a validação de entrada no lado do servidor. Geralmente combinadas com anotações de validação, como @NotNull, @Size, @Min, @Max, entre outras.
@CrossOrigin: Utilizada para configurar permissões de acesso a recursos de diferentes origens (CORS - Cross-Origin Resource Sharing).
______________________________________________________________________________________





EX CLASS CONTROLLER
@RequestMapping("/produtos")
@RestController
public class ProdutoController {

    @GetMapping-> RETURN VALORES, PAGA VALOR RETORNA
    public String produtosEmEstoque() {
        return "Produtos em estoque...";
    }
}
---------------------------------------------------------------------------------------------------
RECEBER INFORMAÇÃO
   @PostMapping -> AQUI PARA RECEBER INFORMAÇÃO, DIZENDO PARA QUE AQUI METODO QUE RECEBE IFNORMAÇÃO
   @Transactional-> AQUI DIZ QUE NOS VAMOS TRABALHAR COM COISA DO BANCO INFORMAÇÃO ENTÃO SE FOR CADASTRA, UPATE, DELETA BOM US
   Transalação ativa no banco de dados
         public void cadastrar(@RequestBody String cep) {
         @RequestBody-> AQUI DIZ QUE TEM UMA REQUISÃO FEITA, E TA PEGANDO ESSA REQUISÃO
         E MANDANDO INFOS
              System.out.println(cep);
    }


        @PostMapping
        @Transactional
         public void cadastrar(@RequestBody String cep) {
              System.out.println(cep);
    }
---------------------------------------------------------------------------------------------------------------------------











------------------------------------------------------------------------------------------------------------------------------
Migration com Flyway
PRIMEIRO DE TUDO VC TEM CRIAR DIRETORIO NO RESOURCE
cria diretorio   ->db.migration<-
cria arquivo com padrão de nomeclatura -> comeca com V maiusculo seguido do indentificador comçãndo do 1 __ dois andelane
e descrever que vc vai fazer nessa migretion
no final fica assim :

V1__create-table-cliente.sql

---------------------------------------------------------------------------------------------------------------------------------
validando dados
class record

public record DataDoctor(
        @NotNull
        String name,

)}


 @PostMapping("/register")
    @Transactional
    public String registerDoctor(@RequestBody @Valid DataDoctor data){
      return doutor.register(data);

    }

Na class record ou na class que vai vim as infos no json, no meu record padrão dto
vc passa as validão tem N tipo de validão

agora para falar que tem ser validadas essa infos tem colocar @valid no metodo que ta pedindo essa requisão
no meu caso registerDoctor

https://jakarta.ee/specifications/bean-validation/3.0/jakarta-bean-validation-spec-3.0.html#builtinconstraints
documentação
------------------------------------------------------------------------------------------------------------------------
paginação
   @GetMapping
    public Page<DadosListagemMedico> listar(Pageable paginacao) {
        return repository.findAll(paginacao).map(DadosListagemMedico::new);
    }
    AQUI PAGINAÇÃO BASICA, RETORNO DELE TEM QUE SER PAGE, E TIPO, TEM PASSAR PARAMENTRO Pageable
    RETORNO DA LISTA PAGE COM PAGINAÇÃO DIRETO

    Page-> AQUI TEM DETALHES DA PAGINA

     @GetMapping
        public Page<DadosListagemMedico> listar(@PageableDefault(size = 10, sort = {"nome"})Pageable paginacao) {
            return repository.findAll(paginacao).map(DadosListagemMedico::new);
        }

        @PageableDefault-> AQUI VC CONTROLA O PAGE PARA QUANTOS REGISTRO VAI MOSTA, COMO VAI ORDENAR, ETC NA URL, VC PODE
        MODIFICAR DE ACORDO QUE SEU FRONT QUERER

------------------------------------------------------------------------------------------------------------------------
PUT OU PATCH
    @PutMapping-> AQUI MOSTRA QUE VAI SER ATUALIZADO
    @Transactional-> QUE VAI TER MOVIMENTO NO BANCO DE DADOS
    public void atualizar(@RequestBody @Valid DadosCadastroMedico dados) {

    }
PUT
O método PUT substitui todos os atuais dados de um recurso pelos dados passados na requisição, ou seja, estamos falando de uma atualização integral. Então, com ele, fazemos a atualização total de um recurso em apenas uma requisição.

PATCH
O método PATCH, por sua vez, aplica modificações parciais em um recurso. Logo, é possível modificar apenas uma parte de um recurso. Com o PATCH, então, realizamos atualizações parciais, o que torna as opções de atualização mais flexíveis.
------------------------------------------------------------------------------------------------------------------------------------------
DELETE

 @DeleteMapping("{/id}")-> AQUI MOSTRA QUE VAI SER DELETADO
    @Transactional-> QUE VAI TER MOVIMENTO NO BANCO DE DADOS
    public void DELETE(@RequestBody @PathVariable Long id) {
    .deleById(id)
    }

------------------------------------------------------------------------------------------------------------------------
Mapear requisições POST em uma classe Controller;
Enviar requisições POST para a API utilizando o Insomnia;
Enviar dados para API no formato JSON;
Utilizar a anotação @RequestBody para receber os dados do corpo da requisição em um parâmetro no Controller;
Utilizar o padrão DTO (Data Transfer Object), via Java Records, para representar os dados recebidos em uma requisição POST.
Adicionar novas dependências no projeto;
Mapear uma entidade JPA e criar uma interface Repository para ela;
Utilizar o Flyway como ferramenta de Migrations do projeto;
Realizar validações com Bean Validation utilizando algumas de suas anotações, como a @NotBlank.
Utilizar a anotação @GetMapping para mapear métodos em Controllers que produzem dados;
Utilizar a interface Pageable do Spring para realizar consultas com paginação;
Controlar a paginação e a ordenação dos dados devolvidos pela API com os parâmetros page, size e sort;
Configurar o projeto para que os comandos SQL sejam exibidos no console.
Mapear requisições PUT com a anotação @PutMapping;
Escrever um código para atualizar informações de um registro no banco de dados;
Mapear requisições DELETE com a anotação @DeleteMapping;
Mapear parâmetros dinâmicos em URL com a anotação @PathVariable;
Implementar o conceito de exclusão lógica com o uso de um atributo booleano.


https://spring.io/projects/spring-boot
https://jakarta.ee/specifications/bean-validation/3.0/jakarta-bean-validation-spec-3.0.html#builtinconstraints