OQ VAMOS APRENDER
Boas práticas na API
Tratamento de erros
Autenticação/Autorização
Tokens JWT
----------------------------------------------------------------------------------------------------------------------
RETORNO PADRONIZADO
RETORNO PARA EXCLUIR TEM RETORNA MAIS COMUM É 204
DELETA
return ResponseEntity.noContent().build(); -> esse retorna o 204
LISTAR
ResponseEntity.ok(object)-> esse devolve codigo 200 e algo no corpo da requisção
ATUALIZAR
ResponseEntity.ok(object)-> esse devolve codigo 200 e algo no corpo da requisção
DEVOLVER DADOS ATUALIZADO
CADASTRA
RETORNO PARA CADASTRA TEM RETORNA MAIS COMUM É 201
corpo dos dados ja cadastrados
e um protocolo http (Location)
return ResponseEntity.created(uri).body(dto);
created(uri)-> uri representa endereço
created(uri)-> spring vai cria cabeçario altomaticamente base na uro
body(dto)-> oq vc vai devolver -> no corpo da requição

CRIANDO CABEÇALHO E OQ VAI DEVOLVER NO CORPO DA REQUISÃO
PARA NÃO PEGAR A URL MANUALMENTE TIPO VC ESCREVE LOCALHOST8080, NOS USAMOS ISSO NO PARAMETRO -> UriComponentsBuilder builder,
PORQUE ELE JA PEGA CORPO URI, AUTOMATICAMENTE
URI uri = builder -> AQUI JA TA URI SALVA
URI uri = builder.path("/cliente/cadastra/{id}")-> AQUI ACRECENTA MAIS COISAS NA URI PEGA A URI ATUAL E ACRESCENTA MAIS OQ VC QUISER
QUE POR EXEMPLO COMPLEMENTO, QUE VAI SER USADO PARA CRIAR CABECARIO
URI uri = builder.path("/cliente/cadastra/{id}").buildAndExpand(clients.getId())-> AQUI VAI PEGAR ID DO MEDICO JA CADSTRADO NO BANCO E ADD
E TROCA {ID} PELO ID DO MEDICO MEIO QUE PARAMETRO DINAMICO
toUri()-> AQUI PARA TRASFORMAR EM OBJETO URI


UriComponentsBuilder builder
URI uri = builder.path("/cliente/cadastra/{id}").buildAndExpand(clients.getId()).toUri();
return ResponseEntity.created(uri).body(Client);

------------------------------------------------------------------------------------------------------------------------------------------------------------
ERROS QUE PODE OCORRE NA URI

Os códigos HTTP (ou HTTPS) possuem três dígitos, sendo que o primeiro dígito significa a classificação dentro das possíveis cinco categorias.

1XX: Informativo – a solicitação foi aceita ou o processo continua em andamento;

2XX: Confirmação – a ação foi concluída ou entendida;

3XX: Redirecionamento – indica que algo mais precisa ser feito ou precisou ser feito para completar a solicitação;

4XX: Erro do cliente – indica que a solicitação não pode ser concluída ou contém a sintaxe incorreta;

5XX: Erro no servidor – o servidor falhou ao concluir a solicitação.


O código 403 é o erro “Proibido”.-> CLIENTE NÃO TEM ACESSO ESSA INFOS

Error 404, significa que essa URL não te levou a lugar nenhum -> URL NÃO EXISTE

Error 500, basicamente, no servidor que mantém a aplicação no ar ou na comunicação com o sistema de arquivos, que fornece a infraestrutura para a aplicação.

Erro 503 significa que o serviço acessado está temporariamente indisponível

https://http.dog/
https://http.cat/


Nessa aula, você aprendeu como:
Utilizar a classe ResponseEntity, do Spring, para personalizar os retornos dos métodos de uma classe Controller;
Modificar o código HTTP devolvido nas respostas da API;
Adicionar cabeçalhos nas respostas da API;
Utilizar os códigos HTTP mais apropriados para cada operação realizada na API.
------------------------------------------------------------------------------------------------------------------------------


RETORNADO ERROS

Common Application Properties
server.error.include-stacktrace=never
esse tira a trace, oq seria diminuido retorno de infos que usario pode ver com erro
https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html



@RestControllerAdvice

essa notação indica que tratamneto de erro da spring
essa class para trata erro
@RestControllerAdvice
public class TratamentoDeErro {
}


 @ExceptionHandler(EntityNotFoundException.class)
    public ResponseEntity tratandoErro404(){
        return ResponseEntity.notFound().build();
    }

 @ExceptionHandler(EntityNotFoundException.class)
esse codigo diz basicamente, se Aparecer erro   EntityNotFoundException-> vai retornar tal coisa
return ResponseEntity.notFound().build();-> que é erro 404



//código omitido

@ExceptionHandler(MethodArgumentNotValidException.class)
public ResponseEntity tratarErro400(MethodArgumentNotValidException ex){
    var erros = ex.getFieldErrors();

    return ResponseEntity.badRequest().body(erros.stream().map(DadosErroValidacao::new).toList());

}

private record DadosErroValidacao(String campo, String mensagem) {
         public DadosErroValidacao(FieldError erro) {
                   this(erro.getField(),erro.getDefaultMessage());

         }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------
public ResponseEntity tratarErro400(MethodArgumentNotValidException ex)-> se pega erro com parametro
var erros = ex.getFieldErrors();-> salva esse erros
return ResponseEntity.badRequest().body(erros.stream().map(DadosErroValidacao::new).toList());-> retorna esse erros
para pegar erro especificos vc faz um dto
badRequest->O código de status de resposta HTTP 400 Bad Request indica que o servidor não pode ou não irá processar a requisição devido a alguma coisa que foi entendida como um erro do cliente

Nessa aula, você aprendeu como:
Criar uma classe para isolar o tratamento de exceptions da API, com a utilização da anotação @RestControllerAdvice;
Utilizar a anotação @ExceptionHandler, do Spring, para indicar qual exception um determinado método da classe de tratamento de erros deve capturar;
Tratar erros do tipo 404 (Not Found) na classe de tratamento de erros;
Tratar erros do tipo 400 (Bad Request), para erros de validação do Bean Validation, na classe de tratamento de erros;
Simplificar o JSON devolvido pela API em casos de erro de validação do Bean Validation.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
spring Security
Autenticação
Autorização (controle de acesso)
Proteção contra-ataques (CSRF, clickjacking, etc.)
Spring Security, que trata de autenticação, autorização e proteção contra ataques. Exploramos o uso de tokens JWT para autenticação e a validação do token para autorização, visando garantir o acesso apenas aos funcionários da clínica.
primeira coisa add o spring Security
configuração do spring Security

primeiro tem criar entidade usario no java e no banco de dados

package com.ByteCard.api.Usuario;

import jakarta.persistence.*;
import lombok.*;

@Entity(name = "User")
@Table(name = "users")
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@EqualsAndHashCode(of = "id")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(name = "logins")
    private String login;
    @Column(name = "senhas")
    private String senha;
}

vc tem criar class de serviço

@Service
public class AutenticaoService implements UserDetailsService{

@Autowired
    UserRepository repository;
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return repository.findByLogin(username);
    }
}
implements UserDetailsService e fazer implementação desta class, isso vai dizer para spring e spring security
que essa class tem ser chamada sempre para ver validação tudo mais

==============================================================================================================================================================================
fazer mudanças para dizer para spring securiy que nos não quer usar programção padrão mas sim uma mesmo configurada para gente
e feito por nos para apiRest

agora vamos mudar
stateful vamos mudar para stateless
o stateful. Como estamos trabalhando com uma API Rest, o processo de autenticação precisa ser stateless.
stateful-> senha e login aqui matem
stateless -> Comunicação stateless: a comunicação feita entre cliente e servidor não deve armazenar nenhuma informação entre as solicitações


como mudar ->

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {
@Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.csrf(csrf -> csrf.disable())
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .build();
    }
}


@Configuration
@EnableWebSecurity
public class SecurityConfiguration {
}


@EnableWebSecurity
Para usar @EnableWebSecurity, os desenvolvedores precisam criar uma classe anotada com esta anotação.
Esta classe deve estender a classe WebSecurityConfigurerAdapter, que é uma classe base para configurar
o Spring Security para uma aplicação web

@Configuration -> aqui diz para spring que class de configuração


 @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.csrf(csrf -> csrf.disable())
                .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .build();
    }


SecurityFilterChain->
HttpSecurity->
.csrf->
.csrf(csrf -> csrf.disable())
sessionManagement->
sessionCreationPolicy(SessionCreationPolicy.STATELESS)->
@Bean->


SecurityFilterChain->
que é responsável por toda a segurança (proteger as URLs da aplicação, validar nome de usuário e senhas enviadas
, redirecionar para o formulário de login e assim por diante) dentro da sua aplicação

aqui resposta
SecurityFilterChain é usado por FilterChainProxy para determinar quais Filterinstâncias do Spring Security
devem ser invocadas para a solicitação atual.
usado muito para retorno de autenticação e autorização

HttpSecurity->
Qual é a utilidade do HttpSecurity?
A classe HttpSecurity ajuda a configurar a segurança para solicitações HTTP específicas . Além disso, permite
usar o método requestMatcher() para restringir a configuração de segurança a um endpoint HTTP específico.
Além disso, fornece flexibilidade para configurar a autorização para uma solicitação HTTP específica.


.csrf->
Cross-site Request Forgery (CSRF) é um tipo de ataque de websites maliciosos
.csrf(csrf -> csrf.disable()) -> aqui desabilita essa tipo de proteção, mas por que vamos ultilizar outro tipo de coisa
que não vai precisar se preocupar com isso

sessionManagement-> aqui uma class com aguns atributos cria sessação com configuração restringe algumas coisas
gerenciamento da sessao


sessionCreationPolicy(SessionCreationPolicy.STATELESS)->
O que é a política de criação de sessão sem estado?
Finalmente, a opção mais estrita de criação de sessão, “stateless”, é uma garantia de que a aplicação não criará nenhuma sessão



@Bean->
O que é a anotação @bean?
Se você usa o Spring Framework para desenvolver aplicativos Java, provavelmente encontrará anotações como @Bean
e @Component. Essas anotações ajudam a definir e configurar os beans que compõem o contexto do aplicativo
Basicamente quando você coloca a anotação @Bean, você está dizendo pro Spring que quer criar esse objeto e deixar ele
disponível para outras classes utilizarem ele como dependência, por exemplo.
serve para exportar uma classe ára o spring fazendo com que ele consiha carrega-la e fazer injeção de dependecia mesmo em outras
class





AGORA CRIA CONTROLLER PARA DISPARA PROCESSO DE AUTENTICAÇÃO

Controller de autenticação


PRIMEIRO DE TUDO CRIAR UMA CLASS CONTROLE DE AUTENTICAÇÃO COM USER
@RestController
@RequestMapping("/login")
public class AutenticacaoController {
    @Autowired
    private AuthenticationManager manager;

        @PostMapping
        @Transactional
        public ResponseEntity efetuarLogin(@RequestBody @Valid DadosAutenticaoLongin longin){
            //chamar class AutenticacaoService e metodo dela loadUserByUsername
            //mas não chamamos ela diretamente, chamamos outra class do spring essa class por baixo dos panos
            // vai chamar essa classe de autenticaçãoService que é AuthenticationManager
            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(longin.login(),longin.senha());
            Authentication authenticate  =  manager.authenticate(token);
            return ResponseEntity.ok().build();
        }
}


CRIA METODO PARA EFETUAR E AUTENTICAR O LOGIN RETORNAR O TOKEN
@PostMapping
@Transactional
public ResponseEntity efetuarLogin(@RequestBody @Valid DadosAutenticaoLongin longin){

}
AGORA NOS PRECISA DISPARA PROCESSO DE AUTENTICAÇÃO, METODO QUE NOS CRIAMO NO SERVICE
MAS NOS NÃO CHAMAMOS ESSES METODO DIRETAMENTE Por quastão
Isso é feito para garantir que a autenticação do usuário seja realizada de
forma segura e eficiente, seguindo as boas práticas de programação.

COMO FAZEMOS ISSO ???????? PARA CHAMAR ELA DE FORMA INDIRETA

USANDO UMA CLASS DO PROPRIO SPRING CHAMDO AuthenticationManager

@Autowired
private AuthenticationManager manager;
AGORA COMO VAMOS FAZER PARA USAR ESSE MANAGER
UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(longin.login(),longin.senha());
Authentication authenticate  =  manager.authenticate(token);






private AuthenticationManager manager;->
Simplificando, o AuthenticationManager é a principal interface estratégica para autenticação
. Se o principal da autenticação de entrada for válido e verificado, AuthenticationManager#authenticate
retornará uma instância de Authentication com o sinalizador autenticado definido como verdadeiro.

Authentication authenticate  =  manager.authenticate(token) AI COM METODO authenticate ELE RETORNA SE LOGUIN VERDADEIROU OU FALSO
SE AUTENTICAÇÃO VERDADEIRA OU FALSA

UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(longin.login(),longin.senha());
Classe UsernamePasswordAuthenticationToken. Uma implementação de autenticação projetada para apresentação
simples de nome de usuário e senha . O principal e as credenciais devem ser definidos com um Objeto que forneça a
respectiva propriedade por meio de seu Objeto. Método toString().

AI RETORNA UM TOKEN -> QUE VAI PARA AUTENTICAÇÃO VER QUE TODAS AS CREDENCIAS ESTA CERTA E ESTA NO BANCO
ELES ESPERA CLASS DELES MESMO


DEPOIS DISSO VC TEM MEIO QUE FAZER A INJEÇÃO NO MANAGER, POR QUE MEIO QUE SPRING NÃO CONSEGUE FAZER ISSO AUTOMATIMENTE
A NÃO SER QUE NOS DIZ PARA ELE FAZER, COMO FAZ ISSO
NA CLASS SECURITYcONFIGURANTIONS
@Bean
    public AuthenticationManager manager (AuthenticationConfiguration configuration){
        try {
            return configuration.getAuthenticationManager();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }
CRIA UMA CLASS QUE DEIXA PARA SPRING INICIAR MESMO TIVER FORA DO RESTCONTROLER COM BEAN E INICIALIZALA
=================================================================================================================================================
senha criptografada em algotitmo Bcrypt
configura como vai ser autenticado com tipo de autenicação cipritrografia que foi ultilizado
vc pode configura isso securityConfigurtion

  @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

PasswordEncoder->
O suporte ao servlet do Spring Security inclui o armazenamento seguro de senhas por
meio da integração com o PasswordEncoder. Você pode personalizar a PasswordEncoderimplementação
usada pelo Spring Security expondo um PasswordEncoderBean .

  return new BCryptPasswordEncoder();-> tipo de criptografia que vc quer

como saber que ta usando


Bcrypt
Scrypt
Argon2
PBKDF2
=====================================================================================================================================================================================================
class
interface

package com.ByteCard.api.Usuario;

import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Entity(name = "User")
@Table(name = "users")
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@EqualsAndHashCode(of = "id")
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(name = "logins")
    private String login;
    @Column(name = "senhas")
    private String senha;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
       return List.of(new SimpleGrantedAuthority("ROLE_USER"));
    }

    @Override
    public String getPassword() {
        return this.senha;
    }

    @Override
    public String getUsername() {
        return this.login;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}


UserDetails->

UserDetailsé retornado pelo UserDetailsService. O DaoAuthenticationProvidervalida
UserDetailse retorna um Authenticationque possui um principal que é UserDetailsretornado pelo
configurado UserDetailsService.
user para vc dizer que qual senha, qual é login se tem tempo de expiração de token etc

Nessa aula, você aprendeu como:
Funciona o processo de autenticação e autorização em uma API Rest;
Adicionar o Spring Security ao projeto;
Funciona o comportamento padrão do Spring Security em uma aplicação;
Implementar o processo de autenticação na API, de maneira Stateless, utilizando as classes e configurações do Spring Security.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
GERANDO TOKEN

<dependency>
  <groupId>com.auth0</groupId>
  <artifactId>java-jwt</artifactId>
  <version>4.4.0</version>
</dependency>
 PRIMEIRO PESQUISA SITE JWT E ADD A BIBLOTECA QUE VAMOS USAR É AUTH0





GERANDO TOKEN
NÃO LEGAL FICAR NA CLASS CONTROLE
ENTÃO BOM CRIA CLASS PROPRIA PARA ISSO, NO INFRA
@Service
public class TokenService{
public String geraToken(uSUARUI USUARIO){
  try {
            var algoritmo = Algorithm.HMAC256("12345678");
            return JWT.create()
                .withIssuer("API Voll.med")
                .withSubject(usuario.getLogin())
                .withExpiresAt(dataExpiracao())
                .sign(algoritmo);
        } catch (JWTCreationException exception){
            throw new RuntimeException("erro ao gerrar token jwt", exception);
        }

}
}

   private Instant dataExpiracao() {
        return LocalDateTime.now().plusHours(2).toInstant(ZoneOffset.of("-03:00"));
    }

var algoritmo = Algorithm.HMAC256("12345678");
ELE PASSA UMA SENHA SECRETA NÃO PODE SER PASSADA PARA NINGUEM QUE FAZ GERA ESSE ALGORITIMO

JWT.create() -> CRIA AGORTIMOGON
.withIssuer("API Voll.med") -> PARA INDENTIFICAR API QUE DONA DESTE AGORITMO
.withSubject(usuario.getLogin())-> PARA AMARZERNAR QUAL USARIO E ARMAZER USUARIO
 .withExpiresAt(dataExpiracao())-> Data de expiração do token
.sign(algoritmo)-> AQUI GERA ALGORTIM0 FALA QUE PARA SER GERADO

como vc faz para usar, vc chama ela na class controller

@Autowired
private TokenService tokenService;

@PostMapping
public ResponseEntity efetuarLogin(@RequestBody @Valid DadosAutenticacao dados) {
    var token = new UsernamePasswordAuthenticationToken(dados.login(), dados.senha());
    var authentication :Authentication = manager.authenticate(token);

    return ResponseEntity.ok(tokenService.gerarToken((Usuario) authentication.getPrincipal()));
}


(Usuario) authentication.getPrincipal()-> aqui authentication ja tem usario

SITE PARA REFERENCIA JWT =https://jwt.io/


mas basicamente sobre secret

na  application.properties, pode ser com qualaquer nome
api.security.token.secret=${JWT_SECRET:123234} -> ai vc com variavel de ambiente e se não tiver usa 2341234
modo de usar
    @Value("${api.security.token.secret}")
    private String secret;


Nessa aula, você aprendeu como:
Adicionar a biblioteca Auth0 java-jwt como dependência do projeto;
Utilizar essa biblioteca para realizar a geração de um token na API;
Injetar uma propriedade do arquivo application.properties em uma classe gerenciada pelo Spring, utilizando a anotação @Value;
Devolver um token gerado na API quando um usuário se autenticar nela.

-----------------------------------------------------------------------------------------------------------------------------------
FOCO NESSA AULA PARTE DE AUTORIZAÇÃO
BLOQUEAR REQUIÇÃO SE NÃO TIVER AUTORIZADA
PRIMEIRO TEM CRIAR UMA CLASS PARA PARA FILTRA TODAS ESSAS REQUISÇÃO
CRIA NO INFRA NO SECURITY
COMO ANOTAÇÃO COMPONENT
@Component
public class SecurityFilter extends OncePerRequestFilter {
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        filterChain.doFilter(request,response);
    }




@Component é ultilizado para que o spring carregue uma classe/componente genericos
uma class com generica

OncePerRequestFilter->
OncePerRequestFilter em tais situações. Spring garante que OncePerRequestFilter seja executado apenas uma vez para uma determinada solicitação.


ESSA CLASS GARANTE QUE SO VAI SER VALIDADO UMA VEZ BASICAMENTE FAZ COM QUE ESSE METODO A CADA REQUISÇÃO SO RODE UMA VEZ
 @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        filterChain.doFilter(request,response);
    }


FILTERCHAIN -> REPRESENTA A CADEIA DE FILTRO NA APLICAÇÃO
FILTERCHAIN.doFilter(resquest,reponse):
necessario para chamar os proximos filtros na aplicação

filterChain.doFilter(request,response);
Os filtros usam FilterChain para invocar o próximo filtro na cadeia ou, se o filtro de chamada for o último filtro na cadeia, para invocar o recurso no final da cadeia
doFilter->chain.doFilter()está avançando para o próximo elemento da cadeia. O último elemento da cadeia é o recurso/servlet de destino.


========================================================================================================================================================================================================================================
primeiro de tudo recupera token

@Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String tokenJWT = recuperaToken(request);
        filterChain.doFilter(request,response);
    }


  private String recuperaToken(HttpServletRequest request) {
        String token =  request.getHeader("Authorization");
        if(token == null){
            throw new RuntimeException("TOKEN NÃO ENCONTRADO");
        }else{
            return token;
        }

    }
 String token =  request.getHeader("Authorization");-> AQUI NO REQUEST DO CABECARIO RECUPERA O TOKEN

getHeader("Authorization")-> AQUI PEGA TOKEN, ONDE ELE DEVIA ESTA QUE É NO Authorization
======================================================================================================================================================================================================================
validando infos do token

public String getSubject(String tokenJWT){
        try {
            var algoritmo = Algorithm.HMAC256(secret);
            return JWT.require(algoritmo)
                    .withIssuer("API BANK")
                    .build()
                    .verify(tokenJWT)
                    .getSubject();
        } catch (JWTVerificationException exception) {
            throw new RuntimeException("Token JWT inválido ou expirado!");
        }

    }

    AQUI VC VAI PEGAR USUARIO
    .verify(tokenJWT)-> VERFICA QUE ESTA VALIDO
    .getSubject(); -> RETORNA OBJETO



AQUI NA CLASS SECUTIRYFILTER
USAR ISSO NA PRIMEIRA PARTE
String subject = tokenService.getSubject(tokenJWT);

 @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return
                http.csrf(csrf -> csrf.disable())
                        .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                        .authorizeHttpRequests(req -> {
                            req.requestMatchers("/login").permitAll();
                            req.anyRequest().authenticated();
                        })
                        .build();
    }

      ESSE TRECHO DE CODIGO
 .authorizeHttpRequests(req -> {
                            req.requestMatchers("/login").permitAll();
                            req.anyRequest().authenticated();
                        })



authorizeHttpRequests()-> para dizer como vai ser as autorização das requisção
oq pode acessar antes ou depois que precisa de autorização ou não
req.requestMatchers("/login").permitAll();, -> aqui diz que todo que tem /login  tem permição todal, para seguiser sem
um token

, o método permitAll() é usado com o método antMatchers() para permitir acesso irrestrito ao endpoint /gfg .
Isso significa que qualquer usuário, autenticado ou não, poderá acessar este endpoint sem qualquer verificação
adicional de autenticação ou autorização

req.anyRequest().authenticated();-> aqui que os demais precisar ser autenticados

qualquer pedido(). authenticated() – anyRequest() define uma cadeia de regras para qualquer solicitação
que não corresponda às regras anteriores . No nosso caso, tais solicitações serão repassadas desde que
sejam autenticadas. Observe que só pode haver uma regra padrão na configuração e ela precisa estar no final.

-----------------------------------------------------------------------------------------------------------------------------------------------------
como detrminar ordem de importancia de filtro, qual deve ser chamado promeiro
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return
                http.csrf(csrf -> csrf.disable())
                        .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                        .authorizeHttpRequests(req -> {
                            req.requestMatchers("/login").permitAll();
                            req.anyRequest().authenticated();
                        })
                        .addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class)
                        .build();
    }

.addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class)
isso server para vc add ordem de prioridade, para um filter oq vem antes oq vem depois etc

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Para saber mais: controle de acesso por anotações
@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    return http.csrf().disable()
        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and().authorizeHttpRequests()
        .requestMatchers(HttpMethod.POST, "/login").permitAll()
        .requestMatchers(HttpMethod.DELETE, "/medicos").hasRole("ADMIN")
        .requestMatchers(HttpMethod.DELETE, "/pacientes").hasRole("ADMIN")
        .anyRequest().authenticated()
        .and().addFilterBefore(securityFilter, UsernamePasswordAuthenticationFilter.class)
        .build();
}
 .requestMatchers(HttpMethod.DELETE, "/medicos").hasRole("ADMIN")
 .requestMatchers(HttpMethod.DELETE, "/pacientes").hasRole("ADMIN")
Repare que no código anterior foram adicionadas duas linhas, indicando ao Spring Security que as requisições
do tipo DELETE para as URLs /medicos e /pacientes somente podem ser executadas por usuários autenticados e cujo
perfil de acesso seja ADMIN.
=======================================================================================================================================================================================================================
Outra maneira de restringir o acesso a determinadas funcionalidades

@GetMapping("/{id}")
@Secured("ROLE_ADMIN")
public ResponseEntity detalhar(@PathVariable Long id) {
    var medico = repository.getReferenceById(id);
    return ResponseEntity.ok(new DadosDetalhamentoMedico(medico));
}

@EnableMethodSecurity(securedEnabled = true)
Atenção! Por padrão esse recurso vem desabilitado no spring Security, sendo que para o utilizar devemos adicionar
a seguinte anotação na classe Securityconfigurations do projeto:







sites para estudar e ler
https://docs.spring.io/spring-security/reference/servlet/authorization/method-security.html
https://jwt.io/


Funcionam os Filters em uma requisição;
Implementar um filter criando uma classe que herda da classe OncePerRequestFilter, do Spring;
Utilizar a biblioteca Auth0 java-jwt para realizar a validação dos tokens recebidos na API;
Realizar o processo de autenticação da requisição, utilizando a classe SecurityContextHolder, do Spring;
Liberar e restringir requisições, de acordo com a URL e o verbo do protocolo HTTP.


==========================================================================================================================================================================================================

-----------------------------------------------------------------------------------------------------------------------------------------
Você deve ter notado que o Bean Validation possui uma mensagem de erro para cada uma de suas anotações. Por exemplo, quando a validação falha em algum atributo anotado com @NotBlank, a mensagem de erro será: must not be blank.

Essas mensagens de erro não foram definidas na aplicação, pois são mensagens de erro padrão do próprio Bean Validation. Entretanto, caso você queira, pode personalizar tais mensagens.

Uma das maneiras de personalizar as mensagens de erro é adicionar o atributo message nas próprias anotações de validação:

public record DadosCadastroMedico(
    @NotBlank(message = "Nome é obrigatório")
    String nome,

    @NotBlank(message = "Email é obrigatório")
    @Email(message = "Formato do email é inválido")
    String email,

    @NotBlank(message = "Telefone é obrigatório")
    String telefone,

    @NotBlank(message = "CRM é obrigatório")
    @Pattern(regexp = "\\d{4,6}", message = "Formato do CRM é inválido")
    String crm,

    @NotNull(message = "Especialidade é obrigatória")
    Especialidade especialidade,

    @NotNull(message = "Dados do endereço são obrigatórios")
    @Valid DadosEndereco endereco) {}COPIAR CÓDIGO
Outra maneira é isolar as mensagens em um arquivo de propriedades, que deve possuir o nome ValidationMessages.properties e ser criado no diretório src/main/resources:

nome.obrigatorio=Nome é obrigatório
email.obrigatorio=Email é obrigatório
email.invalido=Formato do email é inválido
telefone.obrigatorio=Telefone é obrigatório
crm.obrigatorio=CRM é obrigatório
crm.invalido=Formato do CRM é inválido
especialidade.obrigatoria=Especialidade é obrigatória
endereco.obrigatorio=Dados do endereço são obrigatóriosCOPIAR CÓDIGO
E, nas anotações, indicar a chave das propriedades pelo próprio atributo message, delimitando com os caracteres { e }:

public record DadosCadastroMedico(
    @NotBlank(message = "{nome.obrigatorio}")
    String nome,

    @NotBlank(message = "{email.obrigatorio}")
    @Email(message = "{email.invalido}")
    String email,

    @NotBlank(message = "{telefone.obrigatorio}")
    String telefone,

    @NotBlank(message = "{crm.obrigatorio}")
    @Pattern(regexp = "\\d{4,6}", message = "{crm.invalido}")
    String crm,

    @NotNull(message = "{especialidade.obrigatoria}")
    Especialidade especialidade,

    @NotNull(message = "{endereco.obrigatorio}")
    @Valid DadosEndereco endereco) {}






















    ===============================================================================================================================================================================
    Além do Issuer, Subject e data de expiração, podemos incluir outras informações
     no token JWT, de acordo com as necessidades da aplicação. Por exemplo, podemos
      incluir o id do usuário no token, para isso basta utilizar o método withClaim:

    return JWT.create()
        .withIssuer("API Voll.med")
        .withSubject(usuario.getLogin())

        .withClaim("id", usuario.getId())

        .withExpiresAt(dataExpiracao())
        .sign(algoritmo);COPIAR CÓDIGO
    O método withClaim recebe dois parâmetros, sendo o primeiro uma String que
     identifica o nome do claim (propriedade armazenada no token), e o segundo
      a informação que se deseja armazenar.
=========================================================================================================================================================================
@WebFilter(urlPatterns = "/api/**")
public class LogFilter implements Filter {

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        System.out.println("Requisição recebida em: " + LocalDateTime.now());
        filterChain.doFilter(servletRequest, servletResponse);
    }

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

@RestControllerAdvice
public class TratadorDeErros {

    @ExceptionHandler(EntityNotFoundException.class)
    public ResponseEntity tratarErro404() {
        return ResponseEntity.notFound().build();
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity tratarErro400(MethodArgumentNotValidException ex) {
        var erros = ex.getFieldErrors();
        return ResponseEntity.badRequest().body(erros.stream().map(DadosErroValidacao::new).toList());
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity tratarErro400(HttpMessageNotReadableException ex) {
        return ResponseEntity.badRequest().body(ex.getMessage());
    }

    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity tratarErroBadCredentials() {
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Credenciais inválidas");
    }

    @ExceptionHandler(AuthenticationException.class)
    public ResponseEntity tratarErroAuthentication() {
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Falha na autenticação");
    }

    @ExceptionHandler(AccessDeniedException.class)
    public ResponseEntity tratarErroAcessoNegado() {
        return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Acesso negado");
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity tratarErro500(Exception ex) {
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro: " +ex.getLocalizedMessage());
    }

    private record DadosErroValidacao(String campo, String mensagem) {
        public DadosErroValidacao(FieldError erro) {
            this(erro.getField(), erro.getDefaultMessage());
        }
    }
}