CommandLineRunner faz com que codigo seja feito polo comando no terminal não precisando testa
na web etc


A interface CommandLineRunner é um recurso poderoso dentro do universo do Spring Framework,
amplamente utilizado no desenvolvimento de aplicações Java. Ela permite que executemos alguma
ação logo após a inicialização de nossa aplicação. Pode ser muito útil, por exemplo, se quisermos
carregar alguns dados em nosso banco de dados logo na inicialização de nossa aplicação.

Como funciona?
Quando uma aplicação Spring Boot é lançada pode ocorrer várias operações automáticas, como
a criação de beans, configuração de banco de dados entre outros. A abertura para customização
destas operações é limitada, e é aqui que a interface CommandLineRunner entra em cena.

A interface CommandLineRunner representa uma tarefa a ser executada após a inicialização do
Spring Boot, ou seja, permite definir código para ser executado automaticamente quando o
aplicativo é iniciado.



spring.application.name=demo
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=mysql
spring.datasource.url=jdbc:mysql://localhost/salecar?createDatabaseIfNotExist=true&serverTimezone=America/Sao_Paulo&useSSl=false
spring.datasource.username=root
spring.datasource.password=Rafael234
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Brazil/East



@Entity para definir está classe como uma entidade do banco de dados.
@Table Por padrão, o Hibernate usa o nome da classe como o nome da tabela no banco de dados, fazendo apenas a conversão de padrão de nomenclatura do PascalCase para o SnakeCase
@Id  Marca um campo como a chave primária da entidade
@GeneratedValue Usada em conjunto com @Id, essa anotação especifica como a chave primária é gerada automaticamente.
@Column Similar ao que acontece na anotação @Table, o Hibernate utiliza o nome dos atributos e os converte como sendo idênticos aos nomes das colunas no banco de dados
@OneToMany e @ManyToOne
Usadas para mapear relacionamentos de um-para-muitos e muitos-para-um entre entidades. Elas definem as associações entre as tabelas no banco de dados.
Ex:
@Entity
public class Autor {
    @OneToMany(mappedBy = "autor")
    private List<Livro> livros;
}
===============================================================
@Entity
public class Livro {
    @ManyToOne
    @JoinColumn(name = "autor_id")
    private Autor autor;
}
@ManyToMany
A anotação @ManyToMany é usada para mapear relacionamentos muitos-para-muitos entre entidades.

@OneToOne
A anotação @OneToOne é usada para mapear relacionamentos um-para-um entre entidades.
@JoinColum
A anotação @JoinColumn é usada para especificar a coluna que será usada para representar um relacionamento entre entidades. É frequentemente usada em conjunto com @ManyToOne e @OneToOne.

@ManyToOne
@JoinColumn(name = "autor_id")
private Autor autor;

======================================
@JoinTable
A anotação @JoinTable é usada para mapear tabelas de junção em relacionamentos muitos-para-muitos. Ela especifica a tabela intermediária que liga duas entidades.
@Entity
public class Estudante {
    @ManyToMany
    @JoinTable(name = "inscricao",
               joinColumns = @JoinColumn(name = "estudante_id"),
               inverseJoinColumns = @JoinColumn(name = "curso_id"))
    private List<Curso> cursos;
}
@Transient
A anotação @Transient é usada para marcar uma propriedade como não persistente. Isso significa que a propriedade não será mapeada para uma coluna no banco de dados.
@Enumerated
A anotação @Enumerated é usada para mapear campos enumerados (enum) para colunas do banco de dados.
@NamedQuery
Essa anotação é usada para definir consultas JPQL nomeadas que podem ser reutilizadas em várias partes do código.
@Entity
@NamedQuery(name = "Cliente.findAll", query = "SELECT c FROM Cliente c")
public class Cliente { ... }
=======================================
@Cascade
A anotação @Cascade é usada para especificar o comportamento de cascata das operações de persistência, como salvar e excluir, em relacionamentos. Por exemplo, você pode configurar para que as operações de salvar em cascata afetem entidades relacionadas.
@OneToMany(mappedBy = "departamento")
@Cascade(CascadeType.SAVE_UPDATE)
private List<Funcionario> funcionarios;
=============================================
@Embeddable e @Embedded
Essas anotações são usadas para representar tipos incorporados (embeddable types) que podem ser usados como componentes em entidades.

@Embeddable
public class Endereco { ... }

@Entity
public class Cliente {
    @Embedded
    private Endereco endereco;
}








https://hibernate.org/orm/documentation/6.3/ -> documentação do hibernete
https://docs.jboss.org/hibernate/stable/annotations/reference/en/html/ -> documentação de anotação








INFOS IMPORTANTE
@Autowired
private VehiclesRepository repository;
ESSA INJEÇÃO DE INDEPENDECIA -> ESSA ANOTAÇÃO SO PODE SER INTANCIADA NO SPRING, FORA DELE FICA NULL
MAS SE PODE FAZER CONSTRUTO QUE RECEBE ELA E PODE USAR POR OUTROS LUGARES
Master master = new Master(repository);
// SALVAR
repository.save
//pesquisa
repository.findAll
// CRIAR UMA QUERY PERSONALIZADA
@Query('pesquisar que vc quer fazer')
Criar interface -> getNomeDatabela que vai receber
ex
@Query(value = "SELECT sum(compra.valor) as valores FROM compra where compra.Numero_cartao = ?1",nativeQuery = true)
    BigDecimal getValores(Long numberCard);
===================================================================
package com.ByteCard.api.Compra.Dados;

import java.math.BigDecimal;

public interface CompraMaiorValor {
    String getNome();
    String getCpf();
    BigDecimal getValor();
}
======================================================================

ESSA NO HIBERNETE
CRIA VARIAVEL DE AMBIENTE PARA FAZER UMA PESQUISA NO WIN E CRIAR PARA USAR SO USAR ${NOME DA VARIAVEL}
OU USAR
System.getenv(NOME DA VARIAVEL);
